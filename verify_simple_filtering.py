#!/usr/bin/env python
"""
Script simple para verificar el filtrado frontend
"""
import os
import sys

def test_simple_filtering():
    """Probar la funcionalidad b√°sica"""
    
    print("üîç VERIFICACI√ìN DE FILTRADO FRONTEND")
    print("=" * 60)
    
    # 1. Verificar archivo JavaScript
    js_file = 'static/admin/js/payment_form_handler.js'
    print("üìÅ Verificando archivo JavaScript...")
    
    if os.path.exists(js_file):
        print(f"   ‚úÖ {js_file} existe")
        
        with open(js_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificar componentes clave
        checks = [
            ('PaymentFormHandler', 'Clase principal'),
            ('filterCashAccounts', 'M√©todo de filtrado de caja'),
            ('showAllAccounts', 'M√©todo para mostrar todas las cuentas'),
            ('EFECTIVO', 'Detecci√≥n de pago en efectivo'),
            ('CAJA', 'Filtro de cuentas de caja'),
            ('originalOptions', 'Almacenamiento de opciones originales')
        ]
        
        for check, description in checks:
            if check in content:
                print(f"   ‚úÖ {description}: Encontrado")
            else:
                print(f"   ‚ùå {description}: NO encontrado")
    else:
        print(f"   ‚ùå {js_file} no encontrado")
        return False
    
    # 2. Verificar configuraci√≥n en admin
    print("\n‚öôÔ∏è Verificando configuraci√≥n del admin...")
    
    admin_file = 'apps/invoicing/admin.py'
    if os.path.exists(admin_file):
        with open(admin_file, 'r', encoding='utf-8') as f:
            admin_content = f.read()
            
        if 'payment_form_handler.js' in admin_content:
            print("   ‚úÖ JavaScript incluido en Media class")
        else:
            print("   ‚ùå JavaScript NO incluido en Media class")
            
        if "('payment_form', 'account')" in admin_content:
            print("   ‚úÖ Campos en la misma fila en fieldsets")
        else:
            print("   ‚ùå Campos NO en la misma fila")
    else:
        print("   ‚ùå Archivo admin.py no encontrado")
    
    # 3. Verificar CSS
    print("\nüé® Verificando estilos CSS...")
    
    css_file = 'static/admin/css/invoice_lines.css'
    if os.path.exists(css_file):
        with open(css_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
            
        css_checks = [
            ('.field-payment_form', 'Estilos para forma de pago'),
            ('.field-account', 'Estilos para campo cuenta'),
            ('display: inline-block', 'Campos en l√≠nea')
        ]
        
        for check, description in css_checks:
            if check in css_content:
                print(f"   ‚úÖ {description}: Configurado")
            else:
                print(f"   ‚ùå {description}: NO configurado")
    else:
        print("   ‚ùå Archivo CSS no encontrado")
    
    print("\n" + "=" * 60)
    print("‚úÖ VERIFICACI√ìN COMPLETADA")
    print("\nüìã INSTRUCCIONES DE USO:")
    print("1. Ingresar al admin de Django")
    print("2. Ir a Invoicing > Invoices > Add Invoice")
    print("3. Seleccionar 'EFECTIVO' en Forma de Pago")
    print("4. El campo Cuenta deber√≠a filtrar autom√°ticamente")
    print("5. Cambiar a 'CREDITO' para ver todas las cuentas")
    
    print("\nüîç FUNCIONALIDADES:")
    print("‚Ä¢ Filtrado autom√°tico sin AJAX")
    print("‚Ä¢ Basado en texto que contiene 'CAJA'")
    print("‚Ä¢ Valor por defecto autom√°tico para EFECTIVO")
    print("‚Ä¢ Restauraci√≥n completa para otros m√©todos")
    
    return True

if __name__ == "__main__":
    success = test_simple_filtering()
    sys.exit(0 if success else 1)