// üß™ TEST: VERIFICAR VISIBILIDAD DE SECCI√ìN TOTALES
// Ejecutar en ambas vistas:
// CREAR: http://127.0.0.1:8000/admin/invoicing/invoice/add/
// EDITAR: http://127.0.0.1:8000/admin/invoicing/invoice/X/change/ (donde X es el ID)

console.log('üëÅÔ∏è TEST: VISIBILIDAD SECCI√ìN TOTALES');
console.log('=' .repeat(50));

function testTotalsVisibility() {
    
    // 1. Detectar modo actual
    const url = window.location.pathname;
    const isAddMode = url.includes('/add/');
    const isChangeMode = url.includes('/change/') || /\/\d+\//.test(url);
    
    console.log('\nüîç DETECTANDO MODO:');
    console.log(`   URL: ${url}`);
    console.log(`   Modo A√±adir: ${isAddMode ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Modo Modificar: ${isChangeMode ? '‚úÖ' : '‚ùå'}`);
    
    // 2. Buscar secci√≥n de totales
    console.log('\nüìä BUSCANDO SECCI√ìN TOTALES:');
    
    // Buscar fieldset que contenga los campos de totales
    const totalsFieldset = Array.from(document.querySelectorAll('fieldset')).find(fieldset => {
        const legend = fieldset.querySelector('h2');
        return legend && legend.textContent.toLowerCase().includes('totales');
    });
    
    // Buscar campos individuales de totales
    const subtotalField = document.querySelector('input[name="subtotal"]') || 
                         document.querySelector('#id_subtotal');
    const taxField = document.querySelector('input[name="tax_amount"]') || 
                    document.querySelector('#id_tax_amount');
    const totalField = document.querySelector('input[name="total"]') || 
                      document.querySelector('#id_total');
    
    console.log(`   Fieldset "Totales": ${totalsFieldset ? '‚úÖ Encontrado' : '‚ùå No encontrado'}`);
    console.log(`   Campo Subtotal: ${subtotalField ? '‚úÖ Presente' : '‚ùå Ausente'}`);
    console.log(`   Campo Impuestos: ${taxField ? '‚úÖ Presente' : '‚ùå Ausente'}`);
    console.log(`   Campo Total: ${totalField ? '‚úÖ Presente' : '‚ùå Ausente'}`);
    
    // 3. Verificar visibilidad seg√∫n el modo
    console.log('\nüéØ VERIFICACI√ìN DE COMPORTAMIENTO:');
    
    if (isAddMode) {
        // En modo A√ëADIR, la secci√≥n NO deber√≠a aparecer
        console.log('   üìù MODO: A√±adir Factura');
        
        if (!totalsFieldset && !subtotalField && !taxField && !totalField) {
            console.log('   ‚úÖ CORRECTO: Secci√≥n Totales oculta');
            console.log('   ‚úÖ Los campos de totales no est√°n presentes');
        } else {
            console.log('   ‚ùå ERROR: Secci√≥n Totales visible cuando no deber√≠a');
            if (totalsFieldset) console.log('   ‚ùå Fieldset presente');
            if (subtotalField) console.log('   ‚ùå Campo subtotal presente');
            if (taxField) console.log('   ‚ùå Campo impuestos presente');
            if (totalField) console.log('   ‚ùå Campo total presente');
        }
        
    } else if (isChangeMode) {
        // En modo MODIFICAR, la secci√≥n S√ç deber√≠a aparecer
        console.log('   ‚úèÔ∏è MODO: Modificar Factura');
        
        const allFieldsPresent = subtotalField && taxField && totalField;
        
        if (totalsFieldset && allFieldsPresent) {
            console.log('   ‚úÖ CORRECTO: Secci√≥n Totales visible');
            console.log('   ‚úÖ Todos los campos de totales presentes');
            
            // Verificar valores actuales
            console.log('\nüí∞ VALORES ACTUALES:');
            console.log(`   Subtotal: $${subtotalField.value || '0.00'}`);
            console.log(`   Impuestos: $${taxField.value || '0.00'}`);
            console.log(`   Total: $${totalField.value || '0.00'}`);
            
        } else {
            console.log('   ‚ùå ERROR: Secci√≥n Totales no visible cuando deber√≠a');
            if (!totalsFieldset) console.log('   ‚ùå Fieldset ausente');
            if (!subtotalField) console.log('   ‚ùå Campo subtotal ausente');
            if (!taxField) console.log('   ‚ùå Campo impuestos ausente');
            if (!totalField) console.log('   ‚ùå Campo total ausente');
        }
        
    } else {
        console.log('   ‚ö†Ô∏è MODO DESCONOCIDO: No se pudo determinar el modo');
    }
    
    // 4. Verificar calculadora seg√∫n el modo
    console.log('\nüßÆ VERIFICACI√ìN DE CALCULADORA:');
    
    const calculatorExists = typeof window.calculateInvoiceTotals === 'function';
    console.log(`   Funci√≥n disponible: ${calculatorExists ? '‚úÖ' : '‚ùå'}`);
    
    if (calculatorExists && isChangeMode) {
        console.log('   ‚úÖ Calculadora deber√≠a estar activa en modo edici√≥n');
        
        // Probar calculadora
        console.log('   üîÑ Ejecutando c√°lculo de prueba...');
        window.calculateInvoiceTotals();
        
    } else if (isAddMode) {
        console.log('   ‚ÑπÔ∏è En modo creaci√≥n, solo c√°lculo de l√≠neas individuales');
    }
    
    // 5. Resultado final
    console.log('\nüèÜ RESUMEN:');
    
    const correctBehavior = 
        (isAddMode && !totalsFieldset && !subtotalField) ||
        (isChangeMode && totalsFieldset && subtotalField);
    
    if (correctBehavior) {
        console.log('üéâ ¬°COMPORTAMIENTO CORRECTO!');
        if (isAddMode) {
            console.log('‚úÖ Modo A√±adir: Totales ocultos correctamente');
        } else {
            console.log('‚úÖ Modo Modificar: Totales visibles correctamente');
        }
    } else {
        console.log('‚ö†Ô∏è Comportamiento necesita ajustes');
    }
    
    // 6. Instrucciones
    console.log('\nüìã INSTRUCCIONES:');
    console.log('‚Ä¢ Para probar modo A√ëADIR: /admin/invoicing/invoice/add/');
    console.log('‚Ä¢ Para probar modo MODIFICAR: Abrir factura existente');
    console.log('‚Ä¢ La secci√≥n Totales solo debe aparecer al MODIFICAR');
}

// Ejecutar test
setTimeout(testTotalsVisibility, 1000);

console.log('\n‚è∞ Analizando visibilidad de secci√≥n Totales...');