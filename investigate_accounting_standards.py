#!/usr/bin/env python3
"""
Script para investigar normativas y est√°ndares de asientos contables en Ecuador

Autor: Sistema ContaEC
Fecha: 2 de octubre, 2025
Objetivo: Identificar par√°metros espec√≠ficos requeridos por la SUPERCIAS y SRI
"""
import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

from apps.accounting.models import JournalEntry, JournalEntryLine, ChartOfAccounts
from apps.companies.models import Company
from django.contrib.auth import get_user_model
from decimal import Decimal

User = get_user_model()

def analyze_accounting_standards():
    """
    Analiza los est√°ndares contables implementados vs normativas ecuatorianas
    """
    print("üèõÔ∏è AN√ÅLISIS DE NORMATIVAS CONTABLES ECUATORIANAS")
    print("=" * 70)
    
    print("\nüìã 1. ESTRUCTURA ACTUAL DE ASIENTOS CONTABLES:")
    print("-" * 50)
    
    # Analizar estructura actual
    print("üîç Campos implementados en JournalEntry:")
    journal_fields = [field.name for field in JournalEntry._meta.fields]
    for field in journal_fields:
        field_obj = JournalEntry._meta.get_field(field)
        print(f"   ‚Ä¢ {field}: {field_obj.verbose_name} ({type(field_obj).__name__})")
    
    print("\nüîç Campos implementados en JournalEntryLine:")
    line_fields = [field.name for field in JournalEntryLine._meta.fields]
    for field in line_fields:
        field_obj = JournalEntryLine._meta.get_field(field)
        print(f"   ‚Ä¢ {field}: {field_obj.verbose_name} ({type(field_obj).__name__})")

def analyze_regulatory_requirements():
    """
    Analiza requerimientos espec√≠ficos de organismos reguladores
    """
    print("\nüìú 2. REQUERIMIENTOS NORMATIVOS ECUATORIANOS:")
    print("-" * 50)
    
    print("\nüè¢ SUPERINTENDENCIA DE COMPA√ë√çAS (SUPERCIAS):")
    supercias_requirements = [
        "1. Libro Diario: Registro cronol√≥gico de operaciones",
        "2. Libro Mayor: Cuentas individualizadas",
        "3. Balance de Comprobaci√≥n: Verificaci√≥n de saldos",
        "4. Estados Financieros: Cumplimiento NIIF",
        "5. Numeraci√≥n correlativa de asientos",
        "6. Firma autorizada en registros contables",
        "7. Documentaci√≥n de respaldo obligatoria",
        "8. Conservaci√≥n por 7 a√±os m√≠nimo"
    ]
    
    for req in supercias_requirements:
        print(f"   ‚úì {req}")
    
    print("\nüèõÔ∏è SERVICIO DE RENTAS INTERNAS (SRI):")
    sri_requirements = [
        "1. Comprobantes de venta autorizados",
        "2. Respaldo documental de transacciones",
        "3. Registro de retenciones",
        "4. Declaraciones mensuales/anuales",
        "5. Facturaci√≥n electr√≥nica obligatoria",
        "6. Anexos transaccionales (ATS)",
        "7. Formularios 103/104 mensuales",
        "8. Declaraci√≥n anual de impuesto a la renta"
    ]
    
    for req in sri_requirements:
        print(f"   ‚úì {req}")
    
    print("\nüìä NORMAS INTERNACIONALES (NIIF):")
    niif_requirements = [
        "1. Principio de partida doble",
        "2. Causaci√≥n vs. percepci√≥n",
        "3. Materialidad e importancia relativa",
        "4. Prudencia y conservadurismo",
        "5. Consistencia en aplicaci√≥n",
        "6. Revelaci√≥n suficiente",
        "7. Comparabilidad entre per√≠odos",
        "8. Valor razonable cuando aplique"
    ]
    
    for req in niif_requirements:
        print(f"   ‚úì {req}")

def analyze_journal_entry_format():
    """
    Analiza formato espec√≠fico requerido para asientos contables
    """
    print("\nüìù 3. FORMATO EST√ÅNDAR DE ASIENTOS CONTABLES:")
    print("-" * 50)
    
    print("\nüéØ ELEMENTOS OBLIGATORIOS:")
    mandatory_elements = [
        "‚Ä¢ N√∫mero de asiento (correlativo)",
        "‚Ä¢ Fecha de la operaci√≥n", 
        "‚Ä¢ Descripci√≥n o concepto",
        "‚Ä¢ C√≥digo de cuenta (seg√∫n plan de cuentas)",
        "‚Ä¢ Nombre de la cuenta",
        "‚Ä¢ Valores d√©bito y cr√©dito",
        "‚Ä¢ Referencia del documento de respaldo",
        "‚Ä¢ Balance (d√©bitos = cr√©ditos)"
    ]
    
    for element in mandatory_elements:
        print(f"   ‚úì {element}")
    
    print("\nüìã ELEMENTOS RECOMENDADOS:")
    recommended_elements = [
        "‚Ä¢ Usuario responsable del asiento",
        "‚Ä¢ Fecha de registro",
        "‚Ä¢ Estado del asiento (borrador/definitivo)",
        "‚Ä¢ Auxiliares o subcuentas",
        "‚Ä¢ Centro de costos (si aplica)",
        "‚Ä¢ Tipo de documento de respaldo",
        "‚Ä¢ N√∫mero del documento de respaldo",
        "‚Ä¢ Observaciones adicionales"
    ]
    
    for element in recommended_elements:
        print(f"   ‚≠ê {element}")

def analyze_numbering_standards():
    """
    Analiza est√°ndares de numeraci√≥n
    """
    print("\nüî¢ 4. EST√ÅNDARES DE NUMERACI√ìN:")
    print("-" * 50)
    
    print("\nüìä NUMERACI√ìN DE ASIENTOS:")
    numbering_rules = [
        "1. Secuencial y correlativo por ejercicio fiscal",
        "2. Sin saltos ni duplicados",
        "3. Formato sugerido: YYYYMMDD-XXXX o simple correlativo",
        "4. Reinicio anual o continuidad (decisi√≥n empresarial)",
        "5. Prefijos por tipo de asiento (opcional pero recomendado):",
        "   - DI: Diario general",
        "   - AJ: Ajustes",
        "   - CI: Cierre",
        "   - AP: Apertura",
        "   - RE: Reclasificaciones"
    ]
    
    for rule in numbering_rules:
        print(f"   ‚Ä¢ {rule}")

def analyze_current_implementation():
    """
    Analiza la implementaci√≥n actual vs normativas
    """
    print("\nüîç 5. AN√ÅLISIS DE IMPLEMENTACI√ìN ACTUAL:")
    print("-" * 50)
    
    # Obtener datos actuales
    total_entries = JournalEntry.objects.count()
    companies = Company.objects.count()
    
    print(f"\nüìä ESTADO ACTUAL:")
    print(f"   ‚Ä¢ Total de asientos: {total_entries}")
    print(f"   ‚Ä¢ Empresas registradas: {companies}")
    
    if total_entries > 0:
        # Analizar primer asiento
        sample_entry = JournalEntry.objects.first()
        print(f"\nüîç EJEMPLO DE ASIENTO ACTUAL:")
        print(f"   ‚Ä¢ N√∫mero: {sample_entry.number}")
        print(f"   ‚Ä¢ Fecha: {sample_entry.date}")
        print(f"   ‚Ä¢ Estado: {sample_entry.get_state_display()}")
        print(f"   ‚Ä¢ Balanceado: {'‚úì S√≠' if sample_entry.is_balanced else '‚úó No'}")
        print(f"   ‚Ä¢ Total d√©bito: ${sample_entry.total_debit}")
        print(f"   ‚Ä¢ Total cr√©dito: ${sample_entry.total_credit}")
        
        # Analizar l√≠neas
        lines_count = sample_entry.lines.count()
        print(f"   ‚Ä¢ L√≠neas: {lines_count}")
        
        if lines_count > 0:
            sample_line = sample_entry.lines.first()
            print(f"\nüìù EJEMPLO DE L√çNEA:")
            print(f"   ‚Ä¢ Cuenta: {sample_line.account.code} - {sample_line.account.name}")
            print(f"   ‚Ä¢ Descripci√≥n: {sample_line.description}")
            print(f"   ‚Ä¢ D√©bito: ${sample_line.debit}")
            print(f"   ‚Ä¢ Cr√©dito: ${sample_line.credit}")
    
    print("\n‚úÖ CUMPLIMIENTO NORMATIVO ACTUAL:")
    compliance_check = [
        ("Partida doble", "‚úì", "Implementado"),
        ("Numeraci√≥n correlativa", "‚úì", "Implementado"), 
        ("Balance obligatorio", "‚úì", "Implementado"),
        ("Estados de asientos", "‚úì", "Implementado"),
        ("Auditor√≠a de usuarios", "‚úì", "Implementado"),
        ("Respaldo documental", "‚ö†Ô∏è", "Parcial - campos disponibles"),
        ("Firma digital", "‚ùå", "No implementado"),
        ("Exportaci√≥n libros", "‚ùå", "No implementado"),
        ("Retenciones autom√°ticas", "‚ùå", "No implementado"),
        ("Anexos SRI", "‚ùå", "No implementado")
    ]
    
    for item, status, detail in compliance_check:
        print(f"   {status} {item}: {detail}")

def recommend_improvements():
    """
    Recomienda mejoras para cumplimiento total
    """
    print("\nüöÄ 6. RECOMENDACIONES DE MEJORA:")
    print("-" * 50)
    
    improvements = [
        {
            "area": "üìã Estructura de Asientos",
            "items": [
                "‚Ä¢ Agregar campo 'tipo_asiento' (AJ, DI, CI, etc.)",
                "‚Ä¢ Implementar numeraci√≥n con prefijos",
                "‚Ä¢ Agregar campo 'per√≠odo_fiscal'",
                "‚Ä¢ Incluir 'centro_costos' opcional"
            ]
        },
        {
            "area": "üîí Seguridad y Auditor√≠a", 
            "items": [
                "‚Ä¢ Implementar firma digital de asientos",
                "‚Ä¢ Log completo de modificaciones",
                "‚Ä¢ Aprobaci√≥n de asientos por supervisor",
                "‚Ä¢ Bloqueo de per√≠odos cerrados"
            ]
        },
        {
            "area": "üìÑ Documentaci√≥n",
            "items": [
                "‚Ä¢ Adjuntar archivos PDF a asientos",
                "‚Ä¢ Validaci√≥n obligatoria de documentos",
                "‚Ä¢ OCR para automatizar captura",
                "‚Ä¢ Versionado de documentos"
            ]
        },
        {
            "area": "üìä Reportes Legales",
            "items": [
                "‚Ä¢ Exportaci√≥n Libro Diario",
                "‚Ä¢ Exportaci√≥n Libro Mayor", 
                "‚Ä¢ Balance de Comprobaci√≥n autom√°tico",
                "‚Ä¢ Formularios SRI integrados"
            ]
        },
        {
            "area": "ü§ñ Automatizaci√≥n",
            "items": [
                "‚Ä¢ Asientos autom√°ticos por facturaci√≥n",
                "‚Ä¢ C√°lculo autom√°tico de retenciones",
                "‚Ä¢ Provisiones mensuales autom√°ticas",
                "‚Ä¢ Depreciaciones autom√°ticas"
            ]
        }
    ]
    
    for improvement in improvements:
        print(f"\n{improvement['area']}:")
        for item in improvement['items']:
            print(f"   {item}")

def main():
    """
    Funci√≥n principal del an√°lisis
    """
    try:
        analyze_accounting_standards()
        analyze_regulatory_requirements() 
        analyze_journal_entry_format()
        analyze_numbering_standards()
        analyze_current_implementation()
        recommend_improvements()
        
        print("\n" + "=" * 70)
        print("üéØ CONCLUSI√ìN:")
        print("El sistema ContaEC tiene una base s√≥lida que cumple con los")
        print("requerimientos fundamentales de la normativa ecuatoriana.")
        print("Las mejoras recomendadas aumentar√≠an el nivel de cumplimiento")
        print("y facilitar√≠an las obligaciones tributarias y societarias.")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()