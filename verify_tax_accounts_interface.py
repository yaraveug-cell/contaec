#!/usr/bin/env python
"""
Script de verificaci√≥n: Interfaz de Configuraci√≥n de Cuentas IVA - GUEBER
Verifica que la implementaci√≥n est√© completa y funcionando
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

from apps.companies.models import Company, CompanyTaxAccountMapping
from apps.accounting.services import AutomaticJournalEntryService
from django.contrib import admin
from decimal import Decimal

def verify_implementation():
    """Verificar implementaci√≥n completa de la interfaz de cuentas IVA"""
    
    print("üîç VERIFICACI√ìN FINAL: INTERFAZ CUENTAS IVA - GUEBER")
    print("=" * 70)
    
    success_count = 0
    total_checks = 7
    
    # 1. Verificar modelo CompanyTaxAccountMapping
    print("1Ô∏è‚É£ MODELO CompanyTaxAccountMapping:")
    try:
        # Verificar que el modelo existe y tiene los campos correctos
        model_fields = [field.name for field in CompanyTaxAccountMapping._meta.fields]
        required_fields = ['company', 'tax_rate', 'account']
        
        if all(field in model_fields for field in required_fields):
            print("   ‚úÖ Modelo creado con campos correctos")
            success_count += 1
        else:
            print("   ‚ùå Modelo incompleto")
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 2. Verificar migraci√≥n aplicada
    print("\n2Ô∏è‚É£ MIGRACI√ìN DE BASE DE DATOS:")
    try:
        # Intentar crear una instancia de prueba
        test_count = CompanyTaxAccountMapping.objects.count()
        print(f"   ‚úÖ Tabla existe - Registros actuales: {test_count}")
        success_count += 1
    except Exception as e:
        print(f"   ‚ùå Error en base de datos: {e}")
    
    # 3. Verificar configuraci√≥n en Admin
    print("\n3Ô∏è‚É£ CONFIGURACI√ìN ADMIN:")
    try:
        if CompanyTaxAccountMapping in admin.site._registry:
            print("   ‚úÖ Inline disponible en admin")
            success_count += 1
        else:
            print("   ‚ùå Inline no registrado")
    except Exception as e:
        print(f"   ‚ùå Error admin: {e}")
    
    # 4. Verificar empresa GUEBER
    print("\n4Ô∏è‚É£ EMPRESA GUEBER:")
    try:
        gueber = Company.objects.filter(trade_name__icontains='gueber').first()
        if gueber:
            print(f"   ‚úÖ Empresa encontrada: {gueber.trade_name}")
            success_count += 1
        else:
            print("   ‚ùå Empresa GUEBER no encontrada")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 5. Verificar configuraciones IVA de GUEBER
    print("\n5Ô∏è‚É£ CONFIGURACIONES IVA GUEBER:")
    try:
        mappings = CompanyTaxAccountMapping.objects.filter(company=gueber)
        if mappings.exists():
            print(f"   ‚úÖ Configuraciones creadas: {mappings.count()}")
            for mapping in mappings:
                print(f"      ‚Ä¢ IVA {mapping.tax_rate}% ‚Üí {mapping.account.code}")
            success_count += 1
        else:
            print("   ‚ùå Sin configuraciones")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 6. Verificar integraci√≥n con AutomaticJournalEntryService
    print("\n6Ô∏è‚É£ INTEGRACI√ìN CON SERVICIO CONTABLE:")
    try:
        # Probar m√©todo _get_iva_account
        account_15 = AutomaticJournalEntryService._get_iva_account(gueber, Decimal('15.00'))
        account_5 = AutomaticJournalEntryService._get_iva_account(gueber, Decimal('5.00'))
        
        if account_15 and account_5:
            print("   ‚úÖ M√©todo _get_iva_account funcionando")
            print(f"      ‚Ä¢ IVA 15%: {account_15.code}")
            print(f"      ‚Ä¢ IVA 5%: {account_5.code}")
            success_count += 1
        else:
            print("   ‚ùå M√©todo no funciona correctamente")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 7. Verificar compatibilidad con sistema existente
    print("\n7Ô∏è‚É£ COMPATIBILIDAD CON SISTEMA EXISTENTE:")
    try:
        # Verificar que el mapeo hardcodeado sigue existiendo como fallback
        hardcoded_mapping = AutomaticJournalEntryService.IVA_ACCOUNTS_MAPPING
        if hardcoded_mapping:
            print("   ‚úÖ Mapeo hardcodeado conservado como fallback")
            print(f"      ‚Ä¢ Mapeo actual: {hardcoded_mapping}")
            success_count += 1
        else:
            print("   ‚ùå Mapeo hardcodeado perdido")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Resumen final
    print(f"\nüéØ RESUMEN DE VERIFICACI√ìN:")
    print(f"   ‚úÖ Verificaciones exitosas: {success_count}/{total_checks}")
    print(f"   üìä Porcentaje de √©xito: {(success_count/total_checks)*100:.1f}%")
    
    if success_count == total_checks:
        print(f"\nüöÄ IMPLEMENTACI√ìN COMPLETA Y EXITOSA!")
        print(f"\nüìç UBICACI√ìN DE LA INTERFAZ:")
        print(f"   üåê Admin ‚Üí Empresas ‚Üí GUEBER ‚Üí Modificar empresa")
        print(f"   üìã Secci√≥n: 'Configuraci√≥n Contable'")
        print(f"   ‚ûï Tabla inline: 'Configuraciones Cuentas IVA'")
        
        print(f"\nüé® CARACTER√çSTICAS IMPLEMENTADAS:")
        print(f"   ‚Ä¢ ‚úÖ Modelo CompanyTaxAccountMapping creado")
        print(f"   ‚Ä¢ ‚úÖ Migraci√≥n aplicada correctamente")
        print(f"   ‚Ä¢ ‚úÖ Interface admin con inline tabular")
        print(f"   ‚Ä¢ ‚úÖ Datos iniciales para GUEBER configurados")
        print(f"   ‚Ä¢ ‚úÖ Integraci√≥n con AutomaticJournalEntryService")
        print(f"   ‚Ä¢ ‚úÖ Sistema de fallback conservado")
        print(f"   ‚Ä¢ ‚úÖ Configuraci√≥n din√°mica por empresa")
        
        print(f"\nüîÑ FUNCIONAMIENTO:")
        print(f"   1Ô∏è‚É£ Sistema busca configuraci√≥n espec√≠fica por empresa")
        print(f"   2Ô∏è‚É£ Si no encuentra, usa mapeo hardcodeado como fallback")
        print(f"   3Ô∏è‚É£ Facturas existentes no se ven afectadas")
        print(f"   4Ô∏è‚É£ Nueva funcionalidad lista para usar")
        
        return True
    else:
        print(f"\n‚ùå IMPLEMENTACI√ìN INCOMPLETA")
        print(f"   Faltan {total_checks - success_count} verificaciones")
        return False

if __name__ == "__main__":
    success = verify_implementation()
    sys.exit(0 if success else 1)