#!/usr/bin/env python3
"""
Diagn√≥stico del problema del bot√≥n de impresi√≥n no visible
Verificar todos los componentes y encontrar la causa ra√≠z
"""

import os
import sys
import django
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
sys.path.append(str(Path(__file__).parent))

django.setup()

def diagnose_print_button_issue():
    """Diagnosticar por qu√© el bot√≥n no se ve"""
    
    print("=" * 80)
    print("üîç DIAGN√ìSTICO: BOT√ìN DE IMPRESI√ìN NO VISIBLE")
    print("=" * 80)
    
    # 1. Verificar estructura del template
    print(f"\nüìÑ 1. ANALIZANDO TEMPLATE:")
    print("-" * 50)
    
    template_file = Path("templates/admin/accounting/journalentry/change_form.html")
    if template_file.exists():
        with open(template_file, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        print(f"   ‚úÖ Template existe: {template_file}")
        
        # Buscar problemas comunes
        issues = []
        
        # Verificar bloques
        if 'submit_buttons_top' not in template_content:
            issues.append("‚ùå Bloque submit_buttons_top faltante")
        else:
            print(f"   ‚úÖ Bloque submit_buttons_top: Presente")
            
        if '{% if original %}' not in template_content:
            issues.append("‚ùå Condici√≥n original faltante")
        else:
            print(f"   ‚úÖ Condici√≥n if original: Presente")
            
        if 'print-button-inline' not in template_content:
            issues.append("‚ùå Clase print-button-inline faltante")
        else:
            print(f"   ‚úÖ Clase print-button-inline: Presente")
            
        if 'repositionPrintButtons' not in template_content:
            issues.append("‚ùå JavaScript repositionPrintButtons faltante")
        else:
            print(f"   ‚úÖ JavaScript repositionPrintButtons: Presente")
        
        # Verificar estructura HTML b√°sica
        if 'btn-print' not in template_content:
            issues.append("‚ùå Clase btn-print faltante")
        else:
            print(f"   ‚úÖ Clase btn-print: Presente")
            
        if issues:
            print(f"\n   üö® PROBLEMAS ENCONTRADOS EN TEMPLATE:")
            for issue in issues:
                print(f"      {issue}")
        else:
            print(f"   ‚úÖ Template estructura: Correcta")
            
    else:
        print(f"   ‚ùå Template no existe: {template_file}")
    
    # 2. Verificar CSS
    print(f"\nüé® 2. ANALIZANDO CSS:")
    print("-" * 50)
    
    css_file = Path("static/admin/css/journal_print_button.css")
    if css_file.exists():
        with open(css_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
            
        print(f"   ‚úÖ CSS existe: {css_file}")
        
        # Verificar estilos cr√≠ticos
        css_issues = []
        
        if '.print-button-inline' not in css_content:
            css_issues.append("‚ùå Estilo .print-button-inline faltante")
        else:
            print(f"   ‚úÖ Estilo .print-button-inline: Presente")
            
        if '.btn-print' not in css_content:
            css_issues.append("‚ùå Estilo .btn-print faltante")
        else:
            print(f"   ‚úÖ Estilo .btn-print: Presente")
            
        if '.repositioned' not in css_content:
            css_issues.append("‚ùå Estilo .repositioned faltante")
        else:
            print(f"   ‚úÖ Estilo .repositioned: Presente")
            
        # Verificar si hay display: none problem√°tico
        if 'display: none' in css_content:
            print(f"   ‚ö†Ô∏è display: none encontrado - verificando contexto")
            lines = css_content.split('\n')
            for i, line in enumerate(lines):
                if 'display: none' in line:
                    context_start = max(0, i-2)
                    context_end = min(len(lines), i+3)
                    print(f"      L√≠nea {i+1}: {line.strip()}")
                    for j in range(context_start, context_end):
                        if j != i:
                            print(f"         {j+1}: {lines[j].strip()}")
        
        if css_issues:
            print(f"\n   üö® PROBLEMAS CSS:")
            for issue in css_issues:
                print(f"      {issue}")
                
    else:
        print(f"   ‚ùå CSS no existe: {css_file}")
    
    # 3. Verificar admin y URLs
    print(f"\n‚öôÔ∏è 3. VERIFICANDO ADMIN Y URLs:")
    print("-" * 50)
    
    try:
        from apps.accounting.admin import JournalEntryAdmin
        from apps.accounting.models import JournalEntry
        from django.contrib import admin
        
        if JournalEntry in admin.site._registry:
            admin_instance = admin.site._registry[JournalEntry]
            print(f"   ‚úÖ JournalEntry registrado en admin")
            
            # Verificar URL personalizada
            if hasattr(admin_instance, 'get_urls'):
                print(f"   ‚úÖ M√©todo get_urls: Presente")
            else:
                print(f"   ‚ùå M√©todo get_urls: Faltante")
                
            # Verificar vista PDF
            if hasattr(admin_instance, 'print_journal_entry_pdf'):
                print(f"   ‚úÖ Vista print_journal_entry_pdf: Presente")
            else:
                print(f"   ‚ùå Vista print_journal_entry_pdf: Faltante")
                
            # Probar generar URL
            try:
                from django.urls import reverse
                test_entry = JournalEntry.objects.first()
                if test_entry:
                    url = reverse('admin:accounting_journalentry_print_pdf', args=[test_entry.pk])
                    print(f"   ‚úÖ URL generada: {url}")
                else:
                    print(f"   ‚ö†Ô∏è No hay asientos para probar URL")
            except Exception as e:
                print(f"   ‚ùå Error generando URL: {e}")
                
        else:
            print(f"   ‚ùå JournalEntry no registrado")
            
    except Exception as e:
        print(f"   ‚ùå Error verificando admin: {e}")
    
    # 4. An√°lisis del problema m√°s probable
    print(f"\nüîç 4. AN√ÅLISIS DE CAUSAS PROBABLES:")
    print("-" * 50)
    
    probable_causes = [
        {
            'cause': 'Template no se est√° cargando',
            'check': template_file.exists(),
            'solution': 'Verificar ruta y herencia del template'
        },
        {
            'cause': 'JavaScript no se ejecuta',
            'check': 'repositionPrintButtons' in template_content if template_file.exists() else False,
            'solution': 'Verificar errores de JavaScript en consola'
        },
        {
            'cause': 'CSS display: none permanente',
            'check': True,  # Siempre verificar
            'solution': 'Revisar l√≥gica de display en CSS'
        },
        {
            'cause': 'Condici√≥n {% if original %} falsa',
            'check': True,  # Siempre verificar
            'solution': 'Verificar que se est√© editando (no creando) asiento'
        }
    ]
    
    for i, cause_info in enumerate(probable_causes, 1):
        status = "‚úÖ" if cause_info['check'] else "‚ùå"
        print(f"   {i}. {status} {cause_info['cause']}")
        if not cause_info['check']:
            print(f"      üí° Soluci√≥n: {cause_info['solution']}")
    
    # 5. Crear test HTML simple
    print(f"\nüß™ 5. GENERANDO TEST HTML SIMPLE:")
    print("-" * 50)
    
    test_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test Bot√≥n Impresi√≥n</title>
        <style>
            .btn-print {
                background: green;
                color: white;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                display: inline-flex;
                align-items: center;
                gap: 6px;
            }
            .print-button-inline {
                display: none;
            }
        </style>
    </head>
    <body>
        <h1>Test Bot√≥n de Impresi√≥n</h1>
        
        <div class="submit-row">
            <input type="submit" value="Guardar" />
            <input type="submit" value="Guardar y continuar editando" />
        </div>
        
        <a href="#" class="btn-print print-button-inline" style="display: none;">
            <span class="icon">üñ®Ô∏è</span>
            <span class="text">Imprimir PDF</span>
        </a>
        
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                console.log('üîç Test: DOM cargado');
                
                function repositionPrintButtons() {
                    console.log('üîç Test: Ejecutando repositionPrintButtons');
                    
                    const printButtons = document.querySelectorAll('.print-button-inline');
                    console.log('üîç Test: Botones encontrados:', printButtons.length);
                    
                    printButtons.forEach(function(button) {
                        const submitRow = document.querySelector('.submit-row');
                        if (submitRow) {
                            console.log('üîç Test: Submit-row encontrado');
                            
                            const clonedButton = button.cloneNode(true);
                            clonedButton.style.display = 'inline-flex';
                            clonedButton.classList.add('repositioned');
                            
                            submitRow.appendChild(clonedButton);
                            console.log('üîç Test: Bot√≥n clonado y agregado');
                        } else {
                            console.log('‚ùå Test: Submit-row NO encontrado');
                        }
                    });
                }
                
                repositionPrintButtons();
            });
        </script>
    </body>
    </html>
    """
    
    test_file = Path("test_print_button.html")
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(test_html)
    
    print(f"   ‚úÖ Test HTML creado: {test_file}")
    print(f"   üí° Abrir en navegador para ver si funciona la l√≥gica b√°sica")
    
    # 6. Recomendaciones espec√≠ficas
    print(f"\nüí° 6. RECOMENDACIONES DE DEBUGGING:")
    print("-" * 50)
    
    print(f"   üìã PASOS PARA DEBUGGEAR:")
    print(f"   1. Ir al Django Admin ‚Üí Contabilidad ‚Üí Asientos")
    print(f"   2. Abrir un asiento EXISTENTE (no crear nuevo)")
    print(f"   3. Abrir DevTools (F12) ‚Üí Console")
    print(f"   4. Buscar errores JavaScript")
    print(f"   5. Verificar en Elements si existe el HTML del bot√≥n")
    
    print(f"\n   üîß COMANDOS DE CONSOLA PARA DEBUGGING:")
    print(f"   ‚Ä¢ document.querySelector('.print-button-inline')")
    print(f"   ‚Ä¢ document.querySelector('.submit-row')")  
    print(f"   ‚Ä¢ console.log('repositionPrintButtons ejecut√°ndose')")
    
    print(f"\n   ‚ö†Ô∏è VERIFICACIONES CR√çTICAS:")
    print(f"   ‚Ä¢ ¬øEst√°s en modo EDICI√ìN (no creaci√≥n)?")
    print(f"   ‚Ä¢ ¬øEl template se est√° cargando?")
    print(f"   ‚Ä¢ ¬øHay errores JavaScript en consola?")
    print(f"   ‚Ä¢ ¬øEl CSS se est√° aplicando?")
    
    return True

if __name__ == "__main__":
    diagnose_print_button_issue()