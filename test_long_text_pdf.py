#!/usr/bin/env python
"""
Crear asiento de prueba con texto largo para verificar el manejo de desbordamientos
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

from apps.accounting.models import JournalEntry, JournalEntryLine, ChartOfAccounts, Company
from django.contrib.auth import get_user_model
from decimal import Decimal
from django.utils import timezone

User = get_user_model()

def create_test_entry_long_text():
    print("üß™ CREANDO ASIENTO DE PRUEBA CON TEXTO LARGO")
    print("="*55)
    
    # Obtener datos necesarios
    company = Company.objects.first()
    if not company:
        print("‚ùå No hay empresas disponibles")
        return None
    
    user = User.objects.filter(is_staff=True).first()
    if not user:
        print("‚ùå No hay usuarios administrativos")
        return None
    
    accounts = ChartOfAccounts.objects.all()[:3]
    if len(accounts) < 2:
        print("‚ùå No hay suficientes cuentas contables")
        return None
    
    try:
        # Crear asiento con texto muy largo
        journal_entry = JournalEntry.objects.create(
            company=company,
            date=timezone.now().date(),
            description="PRUEBA DE MANEJO DE TEXTO EXTREMADAMENTE LARGO EN DESCRIPCI√ìN DEL ASIENTO CONTABLE PARA VERIFICAR QUE NO SE PRODUZCAN DESBORDAMIENTOS EN EL PDF GENERADO Y QUE EL TEXTO SE AJUSTE CORRECTAMENTE DENTRO DE LAS CELDAS ASIGNADAS",
            reference="REF-PRUEBA-TEXTO-LARGO-PARA-VERIFICAR-DESBORDAMIENTOS-EN-PDF-GENERADO-SISTEMA-CONTABLE-2025",
            created_by=user,
            state='posted',
            posted_by=user,
            posted_at=timezone.now()
        )
        
        # Crear l√≠neas con texto largo
        JournalEntryLine.objects.create(
            journal_entry=journal_entry,
            account=accounts[0],
            description="L√çNEA DE PRUEBA CON DESCRIPCI√ìN EXTREMADAMENTE LARGA PARA VERIFICAR EL COMPORTAMIENTO DEL GENERADOR PDF CUANDO SE ENCUENTRAN TEXTOS QUE EXCEDEN EL ANCHO NORMAL DE LAS COLUMNAS ESTABLECIDAS",
            debit=Decimal('5000.00'),
            credit=Decimal('0.00')
        )
        
        JournalEntryLine.objects.create(
            journal_entry=journal_entry,
            account=accounts[1],
            description="SEGUNDA L√çNEA DE PRUEBA CON DESCRIPCI√ìN IGUALMENTE LARGA PARA ASEGURAR QUE M√öLTIPLES L√çNEAS CON TEXTO EXTENSO NO CAUSEN PROBLEMAS DE FORMATO O VISUALIZACI√ìN",
            debit=Decimal('0.00'),
            credit=Decimal('5000.00')
        )
        
        print(f"‚úÖ Asiento de prueba creado: ID {journal_entry.id}")
        print(f"üìÑ N√∫mero: {journal_entry.number}")
        print(f"üìù Descripci√≥n: {journal_entry.description[:60]}...")
        print(f"üîó Referencia: {journal_entry.reference[:60]}...")
        print(f"üìä L√≠neas creadas: {journal_entry.lines.count()}")
        
        return journal_entry
        
    except Exception as e:
        print(f"‚ùå Error creando asiento de prueba: {e}")
        return None

def test_long_text_pdf(journal_entry):
    print(f"\nüß™ PROBANDO PDF CON TEXTO LARGO")
    print("="*40)
    
    from apps.accounting.journal_pdf import generate_journal_entry_pdf
    import tempfile
    import webbrowser
    
    try:
        # Generar PDF
        print("üîÑ Generando PDF con texto largo...")
        pdf_buffer = generate_journal_entry_pdf(journal_entry)
        
        # Guardar temporalmente
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf:
            temp_pdf.write(pdf_buffer.getvalue())
            temp_pdf_path = temp_pdf.name
        
        print(f"‚úÖ PDF generado exitosamente")
        print(f"üìÅ Archivo: {temp_pdf_path}")
        
        print(f"\nüìã VERIFICACIONES A REALIZAR:")
        print(f"   ‚úÖ Descripci√≥n del asiento no se desborda")
        print(f"   ‚úÖ Referencia del asiento se muestra correctamente")
        print(f"   ‚úÖ Nombres de cuentas se ajustan al espacio disponible")
        print(f"   ‚úÖ Descripciones de l√≠neas no sobresalen de sus celdas")
        print(f"   ‚úÖ El PDF se ve profesional y legible")
        
        # Abrir PDF
        try:
            response = input(f"\n¬øAbrir PDF para verificar formato? (s/n): ").lower().strip()
            if response in ['s', 'si', 's√≠', 'yes', 'y']:
                webbrowser.open(f"file://{temp_pdf_path}")
                
                # Verificaci√≥n manual
                print(f"\nüîç VERIFICACI√ìN MANUAL:")
                print(f"   1. ¬øSe ve todo el texto sin cortarse? ")
                print(f"   2. ¬øLas columnas mantienen su ancho? ")
                print(f"   3. ¬øNo hay superposici√≥n de texto? ")
                print(f"   4. ¬øEl formato se ve profesional? ")
                
                verification = input(f"\n¬øEl PDF se ve correctamente? (s/n): ").lower().strip()
                if verification in ['s', 'si', 's√≠', 'yes', 'y']:
                    print(f"‚úÖ ¬°VERIFICACI√ìN EXITOSA!")
                    print(f"üéâ Las mejoras del PDF funcionan correctamente")
                else:
                    print(f"‚ö†Ô∏è  Puede necesitar ajustes adicionales")
            
        except:
            print(f"üìÅ PDF guardado en: {temp_pdf_path}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando PDF: {e}")
        return False

def main():
    print("üéØ PRUEBA COMPLETA DE MEJORAS EN PDF")
    print("="*45)
    
    # Crear asiento de prueba
    test_entry = create_test_entry_long_text()
    
    if test_entry:
        # Probar PDF
        success = test_long_text_pdf(test_entry)
        
        if success:
            print(f"\nüåê PARA PROBAR EN EL NAVEGADOR:")
            print(f"   URL: http://127.0.0.1:8000/admin/accounting/journalentry/{test_entry.id}/change/")
            print(f"   Hacer clic en 'üñ®Ô∏è Imprimir PDF' y verificar el resultado")
        
        # Preguntar si eliminar el asiento de prueba
        try:
            delete_response = input(f"\n¬øEliminar asiento de prueba? (s/n): ").lower().strip()
            if delete_response in ['s', 'si', 's√≠', 'yes', 'y']:
                test_entry.delete()
                print(f"üóëÔ∏è  Asiento de prueba eliminado")
            else:
                print(f"üíæ Asiento de prueba conservado: ID {test_entry.id}")
        except:
            print(f"üíæ Asiento de prueba conservado: ID {test_entry.id}")

if __name__ == "__main__":
    main()