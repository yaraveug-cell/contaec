#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema despu√©s de eliminar funcionalidad de m√©todo de pago
Verifica que todas las funcionalidades principales siguen operativas
"""

import os
import django
import sys

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

def test_invoice_model():
    """Probar que el modelo Invoice funciona correctamente sin m√©todos de pago"""
    print("üß™ Probando modelo Invoice...")
    
    from apps.invoicing.models import Invoice, InvoiceLine
    from apps.companies.models import Company
    from apps.invoicing.models import Customer
    from apps.inventory.models import Product
    
    try:
        # Verificar que el modelo no tiene los campos eliminados
        invoice_fields = [field.name for field in Invoice._meta.fields]
        
        removed_fields = ['payment_method', 'cash_account', 'client_account', 'credit_details']
        fields_found = [field for field in removed_fields if field in invoice_fields]
        
        if fields_found:
            print(f"‚ùå ERROR: Campos de m√©todo de pago a√∫n presentes: {fields_found}")
            return False
        else:
            print("‚úÖ Campos de m√©todo de pago eliminados correctamente")
        
        # Verificar campos esenciales presentes
        essential_fields = ['company', 'customer', 'number', 'date', 'due_date']
        missing_fields = [field for field in essential_fields if field not in invoice_fields]
        
        if missing_fields:
            print(f"‚ùå ERROR: Campos esenciales faltantes: {missing_fields}")
            return False
        else:
            print("‚úÖ Todos los campos esenciales presentes")
        
        # Probar creaci√≥n de factura (sin guardar)
        company = Company.objects.filter(is_active=True).first()
        if company:
            print(f"‚úÖ Empresa de prueba encontrada: {company.trade_name}")
            
            customer = Customer.objects.filter(company=company).first()
            if customer:
                print(f"‚úÖ Cliente de prueba encontrado: {customer.trade_name}")
                
                # Crear instancia de prueba
                test_invoice = Invoice(
                    company=company,
                    customer=customer,
                    number='TEST-001',
                )
                
                print(f"‚úÖ Instancia de factura creada correctamente")
                print(f"   - Empresa: {test_invoice.company.trade_name}")
                print(f"   - Cliente: {test_invoice.customer.trade_name}")
                print(f"   - N√∫mero: {test_invoice.number}")
                
                return True
        
        print("‚ö†Ô∏è  No hay datos de prueba disponibles")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en modelo Invoice: {e}")
        return False

def test_invoice_calculations():
    """Probar que los c√°lculos de factura siguen funcionando"""
    print("\nüßÆ Probando c√°lculos de factura...")
    
    try:
        from apps.invoicing.models import Invoice
        from apps.companies.models import Company
        
        company = Company.objects.filter(is_active=True).first()
        if company:
            # Buscar factura existente para probar c√°lculos
            invoice = Invoice.objects.filter(company=company).first()
            if invoice:
                # Verificar m√©todos de c√°lculo
                if hasattr(invoice, 'calculate_totals'):
                    print("‚úÖ M√©todo calculate_totals presente")
                
                if hasattr(invoice, 'get_tax_breakdown'):
                    breakdown = invoice.get_tax_breakdown()
                    print(f"‚úÖ M√©todo get_tax_breakdown funciona: {type(breakdown)}")
                
                # Probar c√°lculo de totales
                try:
                    totals = invoice.calculate_totals()
                    print(f"‚úÖ C√°lculos funcionan correctamente")
                    print(f"   - Subtotal disponible: {'subtotal' in totals}")
                    print(f"   - IVA disponible: {'iva_total' in totals}")
                    print(f"   - Total disponible: {'total' in totals}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error en c√°lculos: {e}")
                    
                return True
        
        print("‚ö†Ô∏è  No hay facturas para probar c√°lculos")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en c√°lculos: {e}")
        return False

def test_admin_config():
    """Probar que la configuraci√≥n del admin est√° limpia"""
    print("\n‚öôÔ∏è  Probando configuraci√≥n del admin...")
    
    try:
        from apps.invoicing.admin import InvoiceAdmin
        from apps.invoicing.models import Invoice
        
        # Verificar fieldsets
        admin_instance = InvoiceAdmin(Invoice, None)
        
        if hasattr(admin_instance, 'fieldsets'):
            fieldsets = admin_instance.fieldsets
            print(f"‚úÖ Fieldsets configurados: {len(fieldsets)} secciones")
            
            # Verificar que no hay referencias a m√©todo de pago
            fieldset_text = str(fieldsets)
            payment_refs = ['payment_method', 'cash_account', 'client_account', 'credit_details']
            found_refs = [ref for ref in payment_refs if ref in fieldset_text]
            
            if found_refs:
                print(f"‚ùå Referencias a m√©todo de pago en fieldsets: {found_refs}")
                return False
            else:
                print("‚úÖ Fieldsets limpios sin referencias a m√©todo de pago")
        
        # Verificar Media class
        if hasattr(admin_instance, 'Media'):
            media = admin_instance.Media
            if hasattr(media, 'js'):
                js_files = media.js
                print(f"‚úÖ Archivos JavaScript: {len(js_files)}")
                
                # Verificar que no hay referencias a payment_method_handler
                payment_js = [js for js in js_files if 'payment' in js]
                if payment_js:
                    print(f"‚ùå Referencias a JS de m√©todo de pago: {payment_js}")
                    return False
                else:
                    print("‚úÖ JavaScript limpio sin referencias a m√©todo de pago")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en configuraci√≥n admin: {e}")
        return False

def test_javascript_files():
    """Verificar que los archivos JavaScript principales existen"""
    print("\nüìù Verificando archivos JavaScript...")
    
    js_files = [
        'static/admin/js/invoice_line_calculator.js',
        'static/admin/js/description_autocomplete.js', 
        'static/admin/js/tax_breakdown_calculator.js',
        'static/admin/js/invoice_line_autocomplete.js'
    ]
    
    all_exist = True
    for js_file in js_files:
        if os.path.exists(js_file):
            print(f"‚úÖ {js_file}")
        else:
            print(f"‚ùå FALTANTE: {js_file}")
            all_exist = False
    
    # Verificar que payment_method_handler.js fue eliminado
    payment_js = 'static/admin/js/payment_method_handler.js'
    if not os.path.exists(payment_js):
        print(f"‚úÖ {payment_js} eliminado correctamente")
    else:
        print(f"‚ùå {payment_js} a√∫n existe")
        all_exist = False
    
    return all_exist

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç VERIFICACI√ìN DEL SISTEMA DESPU√âS DE ELIMINAR M√âTODO DE PAGO")
    print("=" * 70)
    
    tests = [
        ("Modelo Invoice", test_invoice_model),
        ("C√°lculos de Factura", test_invoice_calculations), 
        ("Configuraci√≥n Admin", test_admin_config),
        ("Archivos JavaScript", test_javascript_files),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"\n‚ùå ERROR CR√çTICO en {test_name}: {e}")
            results.append(False)
    
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 70)
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ PAS√ì" if results[i] else "‚ùå FALL√ì"
        print(f"{status} - {test_name}")
    
    total_passed = sum(results)
    total_tests = len(results)
    
    print(f"\nResultado: {total_passed}/{total_tests} pruebas pasaron")
    
    if total_passed == total_tests:
        print("\nüéâ ¬°SISTEMA LIMPIO Y FUNCIONAL!")
        print("‚úÖ Todas las funcionalidades principales operativas")
        print("‚úÖ M√©todo de pago eliminado completamente")
        print("‚úÖ Sin referencias residuales")
    else:
        print(f"\n‚ö†Ô∏è  ATENCI√ìN: {total_tests - total_passed} pruebas fallaron")
        print("Revisar los errores anteriores")
    
    return total_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)