#!/usr/bin/env python3
"""
Script para generar an√°lisis de estructura de filas de factura
Este script genera c√≥digo JavaScript que debe ejecutarse en la consola del navegador
para analizar las diferencias entre las primeras 3 filas y las nuevas filas agregadas.
"""

def generate_analysis_code():
    """Genera c√≥digo JavaScript para analizar la estructura de las filas"""
    
    js_code = '''
console.log("üîç === AN√ÅLISIS DE ESTRUCTURA DE FILAS DE FACTURA ===");

// Funci√≥n para analizar una fila espec√≠fica
function analyzeRow(rowElement, rowNumber) {
    if (!rowElement) {
        console.log(`‚ùå Fila ${rowNumber} no encontrada`);
        return null;
    }
    
    console.log(`\\nüìã === AN√ÅLISIS FILA ${rowNumber} ===`);
    console.log(`üè∑Ô∏è  Elemento:`, rowElement);
    console.log(`üè∑Ô∏è  Clases:`, rowElement.className);
    console.log(`üè∑Ô∏è  ID:`, rowElement.id || 'Sin ID');
    
    // Analizar campo de producto
    const productField = rowElement.querySelector('.field-product, [class*="field-product"], td.field-product');
    if (productField) {
        console.log(`\\nüéØ Campo Producto - Fila ${rowNumber}:`);
        console.log(`   üìê width:`, getComputedStyle(productField).width);
        console.log(`   üìê minWidth:`, getComputedStyle(productField).minWidth);
        console.log(`   üìê maxWidth:`, getComputedStyle(productField).maxWidth);
        console.log(`   üìê flex:`, getComputedStyle(productField).flex);
        console.log(`   üìê display:`, getComputedStyle(productField).display);
        console.log(`   üìê boxSizing:`, getComputedStyle(productField).boxSizing);
        console.log(`   üè∑Ô∏è  Clases:`, productField.className);
        console.log(`   üè∑Ô∏è  Inline styles:`, productField.style.cssText);
        
        // Buscar el select dentro del campo
        const selectElement = productField.querySelector('select');
        if (selectElement) {
            console.log(`   üîΩ Select element:`, selectElement);
            console.log(`   üîΩ Select width:`, getComputedStyle(selectElement).width);
            console.log(`   üîΩ Select classes:`, selectElement.className);
            console.log(`   üîΩ Select styles:`, selectElement.style.cssText);
        }
    } else {
        console.log(`‚ùå Campo producto no encontrado en fila ${rowNumber}`);
    }
    
    // Analizar otros campos
    const fieldTypes = ['quantity', 'unit_price', 'discount', 'iva_rate', 'line_total'];
    fieldTypes.forEach(fieldType => {
        const field = rowElement.querySelector(`.field-${fieldType}, [class*="field-${fieldType}"], td.field-${fieldType}`);
        if (field) {
            const computedStyle = getComputedStyle(field);
            console.log(`   üìä ${fieldType}: width=${computedStyle.width}, classes="${field.className}"`);
        }
    });
    
    return {
        element: rowElement,
        productField: productField,
        hasCorrectStyles: productField ? getComputedStyle(productField).width.includes('35') : false
    };
}

// Obtener todas las filas (excluyendo la fila de agregar)
const allRows = document.querySelectorAll('.form-row:not(.add-row)');
console.log(`\\nüìä Total de filas encontradas: ${allRows.length}`);

// Analizar las primeras 3 filas
console.log("\\nüéØ === AN√ÅLISIS DE PRIMERAS 3 FILAS ===");
const firstThreeRows = [];
for (let i = 0; i < Math.min(3, allRows.length); i++) {
    firstThreeRows.push(analyzeRow(allRows[i], i + 1));
}

// Analizar las filas adicionales (4ta en adelante)
if (allRows.length > 3) {
    console.log("\\nüÜï === AN√ÅLISIS DE FILAS ADICIONALES (4ta+) ===");
    const additionalRows = [];
    for (let i = 3; i < allRows.length; i++) {
        additionalRows.push(analyzeRow(allRows[i], i + 1));
    }
    
    // Comparar estructuras
    console.log("\\n‚öñÔ∏è  === COMPARACI√ìN ESTRUCTURAL ===");
    const firstRowData = firstThreeRows[0];
    const fourthRowData = additionalRows[0];
    
    if (firstRowData && fourthRowData) {
        console.log("üîç Comparando fila 1 vs fila 4:");
        
        // Comparar clases del contenedor
        console.log(`   üìã Clases fila 1: "${firstRowData.element.className}"`);
        console.log(`   üìã Clases fila 4: "${fourthRowData.element.className}"`);
        console.log(`   ‚úÖ Clases iguales: ${firstRowData.element.className === fourthRowData.element.className}`);
        
        // Comparar campo producto
        if (firstRowData.productField && fourthRowData.productField) {
            const field1Styles = getComputedStyle(firstRowData.productField);
            const field4Styles = getComputedStyle(fourthRowData.productField);
            
            console.log(`\\nüéØ Comparaci√≥n campo producto:`);
            console.log(`   üìê Fila 1 width: ${field1Styles.width}`);
            console.log(`   üìê Fila 4 width: ${field4Styles.width}`);
            console.log(`   üìê Fila 1 classes: "${firstRowData.productField.className}"`);
            console.log(`   üìê Fila 4 classes: "${fourthRowData.productField.className}"`);
            
            // Verificar si tienen los mismos estilos aplicados
            const stylesMatch = field1Styles.width === field4Styles.width;
            console.log(`   ‚úÖ Estilos coinciden: ${stylesMatch}`);
            
            if (!stylesMatch) {
                console.log(`\\nüö® PROBLEMA DETECTADO:`);
                console.log(`   La fila 4 tiene diferentes estilos que la fila 1`);
                console.log(`   Esto explica por qu√© el campo producto se ve peque√±o`);
            }
        }
    }
} else {
    console.log("‚ÑπÔ∏è  Solo hay 3 filas o menos, agrega m√°s filas para comparar");
}

// Funci√≥n para mostrar todos los selectores CSS que pueden estar afectando
console.log("\\nüé® === AN√ÅLISIS DE SELECTORES CSS ===");
const productFields = document.querySelectorAll('.field-product, [class*="field-product"], td.field-product');
productFields.forEach((field, index) => {
    console.log(`\\nüìã Campo producto ${index + 1}:`);
    console.log(`   üè∑Ô∏è  Elemento:`, field);
    console.log(`   üè∑Ô∏è  Padre:`, field.parentElement);
    console.log(`   üé® Estilos computados:`, {
        width: getComputedStyle(field).width,
        minWidth: getComputedStyle(field).minWidth,
        maxWidth: getComputedStyle(field).maxWidth,
        flex: getComputedStyle(field).flex,
        display: getComputedStyle(field).display
    });
});

console.log("\\n‚úÖ === AN√ÅLISIS COMPLETADO ===");
console.log("Para aplicar estilos manualmente, usa: forceFieldWidths()");
'''
    
    return js_code

if __name__ == "__main__":
    print("üîç GENERANDO C√ìDIGO DE AN√ÅLISIS DE ESTRUCTURA DE FILAS")
    print("=" * 60)
    
    analysis_code = generate_analysis_code()
    
    print("üìã C√ìDIGO JAVASCRIPT GENERADO:")
    print("=" * 60)
    print("Copia y pega el siguiente c√≥digo en la consola del navegador:")
    print("=" * 60)
    print()
    print(analysis_code)
    print()
    print("=" * 60)
    print("‚úÖ INSTRUCCIONES:")
    print("1. Abre la p√°gina de crear factura")
    print("2. Agrega al menos 4 filas de factura")
    print("3. Abre las herramientas de desarrollador (F12)")
    print("4. Pega el c√≥digo en la consola y presiona Enter")
    print("5. Revisa el an√°lisis detallado en la consola")