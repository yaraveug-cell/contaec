"""
Verificar si el sistema de filtrado en cascada de facturas soluciona el problema
de la cuenta del m√©todo de pago que no acepta movimientos
"""

import os
import django
import sys

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

from apps.companies.models import Company, PaymentMethod
from apps.accounting.models import ChartOfAccounts
from apps.invoicing.models import Invoice

def verify_cascade_filtering_solution():
    """Verificar si el filtrado en cascada resuelve el problema"""
    print("üîç VERIFICACI√ìN: Sistema de Filtrado en Cascada para Facturas")
    print("=" * 80)
    
    # Obtener empresa GUEBER
    gueber = Company.objects.filter(trade_name__icontains='GUEBER').first()
    if not gueber:
        print("‚ùå Empresa GUEBER no encontrada")
        return False
    
    print(f"üè¢ Empresa: {gueber.trade_name}")
    
    # ==========================================
    # 1. CONFIGURACI√ìN ACTUAL DEL M√âTODO DE PAGO
    # ==========================================
    print(f"\\n1Ô∏è‚É£ CONFIGURACI√ìN ACTUAL DEL M√âTODO DE PAGO")
    print("-" * 60)
    
    if gueber.payment_method:
        payment_method = gueber.payment_method
        parent_account = payment_method.parent_account
        
        print(f"üí≥ M√©todo de pago: {payment_method.name}")
        print(f"üè¶ Cuenta padre: {parent_account.code} - {parent_account.name}")
        print(f"üí± Acepta movimientos: {'‚úÖ S√≠' if parent_account.accepts_movement else '‚ùå No'}")
        print(f"üìä Nivel: {parent_account.level}")
        
        # ==========================================
        # 2. ANALIZAR EL FILTRADO EN CASCADA
        # ==========================================
        print(f"\\n2Ô∏è‚É£ AN√ÅLISIS DEL FILTRADO EN CASCADA")
        print("-" * 60)
        
        print(f"\\nüîç L√ìGICA DEL SISTEMA ACTUAL:")
        print(f"   1. Usuario selecciona m√©todo de pago: '{payment_method.name}'")
        print(f"   2. JavaScript detecta cuenta padre: {parent_account.code}")
        print(f"   3. Filtra autom√°ticamente cuentas hijas que S√ç aceptan movimientos")
        print(f"   4. Usuario selecciona cuenta hija espec√≠fica")
        print(f"   5. Factura se guarda con cuenta hija (que S√ç acepta movimientos)")
        
        # Buscar cuentas hijas disponibles
        child_accounts = ChartOfAccounts.objects.filter(
            company=gueber,
            code__startswith=parent_account.code + '.',
            accepts_movement=True,
            is_active=True
        ).order_by('code')
        
        print(f"\\nüìã CUENTAS HIJAS DISPONIBLES PARA FILTRADO:")
        print(f"   Total cuentas hijas que aceptan movimientos: {child_accounts.count()}")
        
        for account in child_accounts:
            print(f"   ‚úÖ {account.code} - {account.name}")
        
        if child_accounts.count() == 0:
            print(f"   ‚ùå No hay cuentas hijas disponibles")
            return False
        
        # ==========================================
        # 3. VERIFICAR FACTURAS EXISTENTES
        # ==========================================
        print(f"\\n3Ô∏è‚É£ VERIFICACI√ìN DE FACTURAS EXISTENTES")
        print("-" * 60)
        
        # Facturas con m√©todo Efectivo
        invoices_efectivo = Invoice.objects.filter(
            company=gueber,
            payment_form=payment_method
        )
        
        print(f"üìä Total facturas con m√©todo '{payment_method.name}': {invoices_efectivo.count()}")
        
        if invoices_efectivo.exists():
            # Analizar qu√© cuentas est√°n usando
            accounts_used = set()
            accounts_that_accept_movement = 0
            accounts_that_dont_accept = 0
            
            for invoice in invoices_efectivo:
                if invoice.account:
                    accounts_used.add(invoice.account)
                    if invoice.account.accepts_movement:
                        accounts_that_accept_movement += 1
                    else:
                        accounts_that_dont_accept += 1
            
            print(f"\\nüìà AN√ÅLISIS DE CUENTAS EN FACTURAS:")
            print(f"   Cuentas diferentes usadas: {len(accounts_used)}")
            print(f"   Facturas con cuentas que S√ç aceptan movimiento: {accounts_that_accept_movement}")
            print(f"   Facturas con cuentas que NO aceptan movimiento: {accounts_that_dont_accept}")
            
            print(f"\\nüìã DETALLE DE CUENTAS USADAS:")
            for account in accounts_used:
                movement_status = "‚úÖ S√≠" if account.accepts_movement else "‚ùå No"
                invoice_count = invoices_efectivo.filter(account=account).count()
                print(f"   {account.code} - {account.name}")
                print(f"      Acepta movimientos: {movement_status}")
                print(f"      Facturas con esta cuenta: {invoice_count}")
        
        # ==========================================
        # 4. SIMULAR CREACI√ìN DE NUEVA FACTURA
        # ==========================================
        print(f"\\n4Ô∏è‚É£ SIMULACI√ìN DE CREACI√ìN DE NUEVA FACTURA")
        print("-" * 60)
        
        print(f"\\nüé≠ SIMULACI√ìN DEL PROCESO:")
        print(f"   1. Usuario crea nueva factura")
        print(f"   2. Selecciona empresa: {gueber.trade_name}")
        
        if gueber.payment_method:
            print(f"   3. Sistema auto-selecciona m√©todo: {gueber.payment_method.name}")
            print(f"   4. JavaScript detecta cuenta padre: {parent_account.code}")
            
            if child_accounts.exists():
                first_child = child_accounts.first()
                print(f"   5. Sistema filtra y auto-selecciona: {first_child.code}")
                print(f"   6. ‚úÖ Cuenta seleccionada S√ç acepta movimientos")
                print(f"   7. ‚úÖ Factura se puede guardar correctamente")
                print(f"   8. ‚úÖ Asientos contables se pueden generar")
            else:
                print(f"   5. ‚ùå No hay cuentas hijas disponibles")
                print(f"   6. ‚ùå No se puede completar la factura")
        
        # ==========================================
        # 5. VERIFICAR JAVASCRIPT INTEGRADO
        # ==========================================
        print(f"\\n5Ô∏è‚É£ VERIFICACI√ìN DEL JAVASCRIPT INTEGRADO")
        print("-" * 60)
        
        # Verificar si los archivos JavaScript existen
        js_files = [
            'static/admin/js/integrated_payment_account_handler.js',
            'static/admin/js/integrated_payment_account_handler_vanilla.js',
            'staticfiles/admin/js/integrated_payment_account_handler.js',
            'staticfiles/admin/js/integrated_payment_account_handler_vanilla.js'
        ]
        
        print(f"\\nüìÅ ARCHIVOS JAVASCRIPT:")
        js_exists = False
        for js_file in js_files:
            if os.path.exists(js_file):
                print(f"   ‚úÖ {js_file}")
                js_exists = True
            else:
                print(f"   ‚ùå {js_file}")
        
        if js_exists:
            print(f"\\n‚úÖ FUNCIONALIDAD JAVASCRIPT DISPONIBLE:")
            print(f"   ‚Ä¢ filterChildAccounts(): Filtra cuentas hijas autom√°ticamente")
            print(f"   ‚Ä¢ isChildAccount(): Verifica relaci√≥n padre-hijo")
            print(f"   ‚Ä¢ Auto-selecci√≥n de primera cuenta v√°lida")
        else:
            print(f"\\n‚ùå JAVASCRIPT NO ENCONTRADO - Funcionalidad limitada")
        
        # ==========================================
        # 6. CONCLUSI√ìN T√âCNICA
        # ==========================================
        print(f"\\n6Ô∏è‚É£ CONCLUSI√ìN T√âCNICA")
        print("-" * 60)
        
        print(f"\\nüéØ AN√ÅLISIS DEL PROBLEMA ORIGINAL:")
        print(f"   Problema: Cuenta padre {parent_account.code} no acepta movimientos")
        print(f"   Impacto: Asientos autom√°ticos fallar√≠an")
        
        print(f"\\nüõ†Ô∏è AN√ÅLISIS DE LA SOLUCI√ìN ACTUAL:")
        
        if child_accounts.exists() and js_exists:
            print(f"   ‚úÖ SOLUCI√ìN EFECTIVA:")
            print(f"      ‚Ä¢ Sistema filtra autom√°ticamente a cuentas hijas")
            print(f"      ‚Ä¢ Cuentas hijas S√ç aceptan movimientos")
            print(f"      ‚Ä¢ JavaScript maneja la cascada autom√°ticamente")
            print(f"      ‚Ä¢ Usuario no puede seleccionar cuenta padre directamente")
            
            print(f"\\nüéâ VEREDICTO: EL PROBLEMA EST√Å RESUELTO")
            print(f"   ‚Ä¢ El filtrado en cascada previene el error")
            print(f"   ‚Ä¢ Las facturas usan autom√°ticamente cuentas v√°lidas")
            print(f"   ‚Ä¢ Los asientos contables se pueden generar sin problemas")
            
            return True
        else:
            problems = []
            if not child_accounts.exists():
                problems.append("No hay cuentas hijas disponibles")
            if not js_exists:
                problems.append("JavaScript de filtrado no encontrado")
            
            print(f"   ‚ùå SOLUCI√ìN INCOMPLETA:")
            for problem in problems:
                print(f"      ‚Ä¢ {problem}")
            
            print(f"\\n‚ö†Ô∏è VEREDICTO: SOLUCI√ìN PARCIAL")
            print(f"   ‚Ä¢ El problema persiste en algunos casos")
            print(f"   ‚Ä¢ Se requieren correcciones adicionales")
            
            return False
    
    else:
        print("‚ùå No hay m√©todo de pago configurado")
        return False

if __name__ == "__main__":
    success = verify_cascade_filtering_solution()
    if success:
        print(f"\\n‚úÖ Resultado: Sistema funcionando correctamente")
    else:
        print(f"\\n‚ùå Resultado: Se requieren correcciones")
    
    sys.exit(0 if success else 1)