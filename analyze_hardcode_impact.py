"""
An√°lisis de impacto del mapeo hardcodeado IVA_ACCOUNTS_MAPPING
"""

import os
import django
import sys

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

from apps.companies.models import Company, CompanyTaxAccountMapping
from apps.accounting.models import ChartOfAccounts, JournalEntry, JournalEntryLine
from apps.accounting.services import AutomaticJournalEntryService
from decimal import Decimal

def analyze_hardcoded_mapping_impact():
    """Analizar impacto del mapeo hardcodeado IVA_ACCOUNTS_MAPPING"""
    print("üîç AN√ÅLISIS DE IMPACTO DEL MAPEO HARDCODEADO IVA_ACCOUNTS_MAPPING")
    print("=" * 80)
    
    # 1. Estado actual del mapeo hardcodeado
    print("\\n1Ô∏è‚É£ MAPEO HARDCODEADO ACTUAL")
    print("-" * 60)
    
    hardcoded_mapping = AutomaticJournalEntryService.IVA_ACCOUNTS_MAPPING
    print("Contenido actual:")
    for rate, code in hardcoded_mapping.items():
        status = f"‚Üí {code}" if code else "‚Üí Sin cuenta"
        print(f"   IVA {rate:4.0f}% {status}")
    
    # 2. Escenarios de impacto
    print("\\n2Ô∏è‚É£ ESCENARIOS DE IMPACTO SI SE ELIMINA EL HARDCODE")
    print("-" * 60)
    
    gueber = Company.objects.filter(trade_name__icontains='GUEBER').first()
    
    # Escenario 1: Empresa CON configuraci√≥n completa
    mappings = CompanyTaxAccountMapping.objects.filter(company=gueber)
    print("\\nüìä Empresa GUEBER (CON configuraci√≥n):")
    print(f"   Mapeos configurados: {mappings.count()}")
    
    for rate, hardcode in hardcoded_mapping.items():
        if hardcode:  # Solo para tarifas con hardcode
            # Buscar configuraci√≥n
            config_mapping = mappings.filter(tax_rate=rate).first()
            if config_mapping:
                config_account = config_mapping.account.code
                if config_account == hardcode:
                    print(f"   ‚úÖ IVA {rate:4.0f}%: Configuraci√≥n coincide ({config_account})")
                else:
                    print(f"   ‚ö†Ô∏è IVA {rate:4.0f}%: DIFERENCIA - Config: {config_account} vs Hardcode: {hardcode}")
            else:
                print(f"   ‚ùå IVA {rate:4.0f}%: Sin configuraci√≥n, depender√≠a del hardcode ({hardcode})")
    
    # Escenario 2: Empresa SIN configuraci√≥n
    print("\\nüè¢ Empresa hipot√©tica SIN configuraci√≥n:")
    print("   Impacto: Depender√≠a 100% del mapeo hardcodeado")
    
    for rate, hardcode in hardcoded_mapping.items():
        if hardcode:
            print(f"   üî¥ IVA {rate:4.0f}%: FALLO total ‚Üí No encontrar√≠a cuenta")
        else:
            print(f"   ‚ö™ IVA {rate:4.0f}%: Sin impacto (ya es None)")
    
    # 3. An√°lisis de dependencias en el c√≥digo
    print("\\n3Ô∏è‚É£ AN√ÅLISIS DE DEPENDENCIAS EN EL C√ìDIGO")
    print("-" * 60)
    
    print("\\nüîß Funci√≥n _get_iva_account() - SISTEMA DE FALLBACK:")
    print("   1. PRIORIDAD 1: CompanyTaxAccountMapping (configurable)")
    print("   2. PRIORIDAD 2: IVA_ACCOUNTS_MAPPING (hardcode) ‚Üê AQU√ç")
    print("   3. PRIORIDAD 3: B√∫squeda por c√≥digo en ChartOfAccounts")
    
    print("\\nüéØ ¬øQu√© pasa si se elimina el hardcode?")
    print("   ‚Ä¢ Empresas CON configuraci√≥n: ‚úÖ Sin impacto")
    print("   ‚Ä¢ Empresas SIN configuraci√≥n: ‚ùå Fallar√≠an en Prioridad 2")
    print("   ‚Ä¢ Resultado: Pasar√≠an directo a Prioridad 3 (b√∫squeda por c√≥digo)")
    
    # 4. Simulaci√≥n pr√°ctica
    print("\\n4Ô∏è‚É£ SIMULACI√ìN PR√ÅCTICA")
    print("-" * 60)
    
    test_rates = [15.0, 5.0, 12.0]
    
    for rate in test_rates:
        print(f"\\nüß™ Simulaci√≥n IVA {rate}% para GUEBER:")
        
        # Simular con configuraci√≥n actual (CON hardcode)
        account_with_hardcode = AutomaticJournalEntryService._get_iva_account(gueber, rate)
        
        # Simular SIN hardcode (solo configuraci√≥n)
        mapping = CompanyTaxAccountMapping.objects.filter(company=gueber, tax_rate=rate).first()
        account_without_hardcode = mapping.account if mapping else None
        
        print(f"   Con hardcode: {account_with_hardcode.code if account_with_hardcode else 'None'}")
        print(f"   Sin hardcode: {account_without_hardcode.code if account_without_hardcode else 'None'}")
        
        if account_with_hardcode and account_without_hardcode:
            if account_with_hardcode.code == account_without_hardcode.code:
                print(f"   ‚úÖ Resultado id√©ntico")
            else:
                print(f"   ‚ö†Ô∏è Resultado diferente")
        elif account_without_hardcode:
            print(f"   ‚úÖ Configuraci√≥n suficiente")
        else:
            print(f"   ‚ùå Perder√≠a funcionalidad sin hardcode")
    
    # 5. Facturas existentes
    print("\\n5Ô∏è‚É£ IMPACTO EN FACTURAS EXISTENTES")
    print("-" * 60)
    
    # Buscar asientos que pudieran usar cuentas del hardcode
    hardcoded_accounts = [code for code in hardcoded_mapping.values() if code]
    
    for account_code in hardcoded_accounts:
        account = ChartOfAccounts.objects.filter(company=gueber, code=account_code).first()
        if account:
            lines_count = JournalEntryLine.objects.filter(account=account).count()
            print(f"   üìù Cuenta {account_code}: {lines_count} l√≠neas de asiento existentes")
        else:
            print(f"   ‚ùå Cuenta {account_code}: No existe en GUEBER")
    
    # 6. Recomendaciones
    print("\\n6Ô∏è‚É£ RECOMENDACIONES DE MIGRACI√ìN")
    print("-" * 60)
    
    print("\\nüü¢ ELIMINACI√ìN SEGURA (recomendado):")
    print("   1. ‚úÖ GUEBER tiene configuraci√≥n completa")
    print("   2. ‚úÖ Todas las tarifas est√°n mapeadas")
    print("   3. ‚úÖ Sistema de prioridades funciona sin hardcode")
    print("   4. ‚úÖ Mejora la mantenibilidad del c√≥digo")
    
    print("\\nüü° ELIMINACI√ìN CON PRECAUCI√ìN:")
    print("   1. ‚ö†Ô∏è Verificar otras empresas antes de eliminar")
    print("   2. ‚ö†Ô∏è Crear configuraci√≥n para empresas faltantes")
    print("   3. ‚ö†Ô∏è Probar generaci√≥n de asientos despu√©s")
    
    print("\\nüî¥ CONSERVAR SI:")
    print("   1. ‚ùå Existen empresas sin configurar")
    print("   2. ‚ùå Se requiere compatibilidad absoluta")
    print("   3. ‚ùå No hay tiempo para migraci√≥n completa")
    
    # 7. Plan de migraci√≥n
    print("\\n7Ô∏è‚É£ PLAN DE MIGRACI√ìN SUGERIDO")
    print("-" * 60)
    
    print("\\nFASE 1 - Preparaci√≥n:")
    print("   ‚Ä¢ Auditar todas las empresas del sistema")
    print("   ‚Ä¢ Crear CompanyTaxAccountMapping para empresas faltantes")
    print("   ‚Ä¢ Verificar que todas tengan cuentas IVA v√°lidas")
    
    print("\\nFASE 2 - Transici√≥n:")
    print("   ‚Ä¢ Agregar logging cuando se use fallback hardcode")
    print("   ‚Ä¢ Monitorear por per√≠odo de prueba")
    print("   ‚Ä¢ Documentar empresas que a√∫n dependen del hardcode")
    
    print("\\nFASE 3 - Eliminaci√≥n:")
    print("   ‚Ä¢ Comentar el IVA_ACCOUNTS_MAPPING temporalmente")
    print("   ‚Ä¢ Probar generaci√≥n de asientos en todas las empresas")
    print("   ‚Ä¢ Eliminar definitivamente si todo funciona")
    
    # 8. C√≥digo de eliminaci√≥n segura
    print("\\n8Ô∏è‚É£ C√ìDIGO PARA ELIMINACI√ìN SEGURA")
    print("-" * 60)
    
    print("""
    # Modificaci√≥n en _get_iva_account():
    
    # ANTES (con hardcode):
    account_code = cls.IVA_ACCOUNTS_MAPPING.get(iva_rate)
    
    # DESPU√âS (sin hardcode):
    # Eliminar la l√≠nea anterior y dejar que pase
    # directo a la b√∫squeda por c√≥digo en ChartOfAccounts
    """)
    
    return True

if __name__ == "__main__":
    analyze_hardcoded_mapping_impact()