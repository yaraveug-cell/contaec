#!/usr/bin/env python3
"""
Script para diagnosticar por qu√© el autocompletado no funciona
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'contaec.settings')
django.setup()

def diagnose_autocomplete_problem():
    print("üîç DIAGN√ìSTICO DEL PROBLEMA DE AUTOCOMPLETADO")
    print("=" * 60)
    
    print("\nüìã 1. VERIFICANDO LOGS DE CONSOLA:")
    print("-" * 50)
    print("‚ùå PROBLEMA DETECTADO: No aparecen logs de invoice_line_autocomplete.js")
    print("‚úÖ Otros scripts S√ç funcionan: description_autocomplete.js, calculadoras")
    print("üîç Esto indica que el script NO se est√° cargando o NO se est√° ejecutando")
    
    print("\nüìÅ 2. VERIFICANDO ARCHIVOS JAVASCRIPT:")
    print("-" * 50)
    
    js_files_to_check = [
        'static/admin/js/invoice_line_autocomplete.js',
        'static/admin/js/invoice_admin.js'
    ]
    
    for js_file in js_files_to_check:
        if os.path.exists(js_file):
            print(f"‚úÖ {js_file} - EXISTE")
            with open(js_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'console.log' in content:
                    print(f"   üìù Contiene console.log para debugging")
                else:
                    print(f"   ‚ö†Ô∏è  Sin console.log")
        else:
            print(f"‚ùå {js_file} - NO EXISTE")
    
    print("\nüß™ 3. POSIBLES CAUSAS DEL PROBLEMA:")
    print("-" * 50)
    print("1. ‚ùå Error de sintaxis en JavaScript (impide ejecuci√≥n)")
    print("2. ‚ùå Conflicto entre scripts (uno bloquea al otro)")
    print("3. ‚ùå DOM no est√° listo cuando se ejecuta")
    print("4. ‚ùå Widget de autocompletado no se detecta correctamente")
    print("5. ‚ùå Event listeners no se configuran correctamente")
    
    print("\nüõ†Ô∏è 4. CREANDO VERSI√ìN DE DEBUG SIMPLIFICADA:")
    print("-" * 50)
    
    # Crear versi√≥n ultra-simplificada para debug
    debug_js = '''
/**
 * DEBUG: Versi√≥n ultra-simplificada de autocompletado
 */
(function() {
    'use strict';
    
    console.log('üöÄ DEBUG: Script de autocompletado cargado');
    
    function debugLog(message) {
        console.log('[AUTOCOMPLETE DEBUG] ' + message);
    }
    
    // Funci√≥n simple para probar
    function simpleTest() {
        debugLog('Funci√≥n de prueba ejecutada');
        
        // Buscar widgets de autocompletado
        const widgets = document.querySelectorAll('input.admin-autocomplete');
        debugLog('Widgets encontrados: ' + widgets.length);
        
        widgets.forEach(function(widget, index) {
            debugLog('Widget ' + (index + 1) + ': ' + widget.name);
        });
        
        // Buscar campos de producto espec√≠ficamente
        const productFields = document.querySelectorAll('input[name*="product"]');
        debugLog('Campos de producto: ' + productFields.length);
        
        productFields.forEach(function(field, index) {
            debugLog('Campo producto ' + (index + 1) + ': ' + field.name + ' (type: ' + field.type + ')');
        });
    }
    
    // Ejecutar al cargar DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('DOM cargado - ejecutando pruebas');
            simpleTest();
        });
    } else {
        debugLog('DOM ya listo - ejecutando pruebas inmediatamente');
        simpleTest();
    }
    
    // Tambi√©n ejecutar despu√©s de un delay
    setTimeout(function() {
        debugLog('Ejecutando pruebas despu√©s de delay');
        simpleTest();
    }, 2000);
    
})();
'''
    
    # Guardar versi√≥n debug
    debug_file = 'static/admin/js/invoice_line_autocomplete_debug.js'
    with open(debug_file, 'w', encoding='utf-8') as f:
        f.write(debug_js)
    
    print(f"‚úÖ Creado: {debug_file}")
    
    print("\nüìã 5. PLAN DE CORRECCI√ìN:")
    print("-" * 50)
    print("1. üîÑ Reemplazar script actual con versi√≥n debug")
    print("2. üîç Verificar logs en consola del navegador")
    print("3. üîß Identificar causa espec√≠fica del problema")
    print("4. ‚úÖ Aplicar correcci√≥n dirigida")
    
    return debug_file

if __name__ == "__main__":
    debug_file = diagnose_autocomplete_problem()
    
    print(f"\nüîß PR√ìXIMOS PASOS:")
    print(f"1. Reemplazar invoice_line_autocomplete.js con versi√≥n debug")
    print(f"2. Refrescar p√°gina del admin")
    print(f"3. Abrir consola (F12) y verificar logs de DEBUG")
    print(f"4. Reportar qu√© mensajes aparecen")